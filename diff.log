diff --git a/src/compositor/context.rs b/src/compositor/context.rs
index 97ac8ed..475d4e8 100644
--- a/src/compositor/context.rs
+++ b/src/compositor/context.rs
@@ -24,14 +24,14 @@ impl<'a> Context<'a> {
 
     pub fn get<'b: 'a, T>(self, state: &'b State<T>) -> &'a T {
         match state {
-            State::Value(v) => v,
+            State::Value(v) => &v.pointer,
             State::Pointer(pointer) => self.controller.get(pointer.id()).map::<T>(),
         }
     }
 
     pub fn ref_count<T>(self, state: &'_ State<T>) -> usize {
         match state {
-            State::Value(pointer) => Rc::strong_count(pointer),
+            State::Value(value) => Rc::strong_count(&value.pointer),
             State::Pointer(pointer) => self.controller.ref_count(pointer.id()),
         }
     }
diff --git a/src/compositor/event/controller.rs b/src/compositor/event/controller.rs
index 71f8e42..6706bdd 100644
--- a/src/compositor/event/controller.rs
+++ b/src/compositor/event/controller.rs
@@ -71,7 +71,7 @@ impl Action {
     }
 }
 
-// SAFETY: `ControllerObj` created by `Send` object and we do not copy result in multiple threads
+// SAFETY: `Obj` created by `Send` object and we do not copy result in multiple threads
 // (using it only in ui thread)
 unsafe impl Send for Obj {}
 
diff --git a/src/state/mod.rs b/src/state/mod.rs
index f720678..967942e 100644
--- a/src/state/mod.rs
+++ b/src/state/mod.rs
@@ -1,7 +1,7 @@
 pub(crate) mod controller;
 mod create;
 
-use std::rc::Rc;
+use std::{cell::RefCell, rc::Rc};
 
 pub use self::{
     controller::pointer::Pointer,
@@ -12,10 +12,15 @@ pub(crate) use controller::Controller;
 
 #[derive(Debug, Eq, PartialEq, Clone)]
 pub enum State<T> {
-    Value(Rc<T>),
+    Value(InnerValue<T>),
     Pointer(Pointer<T>),
 }
 
+#[derive(Clone, Debug, Eq, PartialEq)]
+pub struct InnerValue<T> {
+    pub(crate) pointer: Rc<T>,
+}
+
 impl<T> From<Pointer<T>> for State<T> {
     fn from(v: Pointer<T>) -> Self {
         Self::Pointer(v)
@@ -24,12 +29,12 @@ impl<T> From<Pointer<T>> for State<T> {
 
 impl<T> From<T> for State<T> {
     fn from(v: T) -> Self {
-        Self::Value(Rc::new(v))
+        Self::Value(InnerValue { pointer: Rc::new(v) })
     }
 }
 
 impl From<&str> for State<String> {
     fn from(v: &str) -> Self {
-        Self::Value(Rc::new(v.to_owned()))
+        Self::Value(InnerValue { pointer: Rc::new(v.to_owned()) })
     }
 }
diff --git a/tests/state.rs b/tests/state.rs
index 4c9e5c2..d647dc3 100644
--- a/tests/state.rs
+++ b/tests/state.rs
@@ -184,7 +184,7 @@ fn state_value_clone_increment_ref_counter() {
     let backend = Raw::default();
     let mut app = App::new(backend);
 
-    let state = State::Value(Rc::new(0));
+    let state = State::from(Rc::new(0));
     let state2 = state.clone();
 
     app.process_event();
@@ -201,10 +201,10 @@ fn state_value_get_by_context() {
     let backend = Raw::default();
     let mut app = App::new(backend);
 
-    let state = State::Value(Rc::new(0));
+    let state = State::from(Rc::new(0));
 
     app.process_event();
 
     let context = app.context();
-    assert_eq!(0, *context.get(&state));
+    assert_eq!(0, **context.get(&state));
 }
